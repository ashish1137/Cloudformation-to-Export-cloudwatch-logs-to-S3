AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Export cloudWatch logs to S3
Parameters:
    REGION:
        Type: String
        Default: ap-southeast-2
        AllowedValues:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - af-south-1
            - ap-east-1
            - ap-south-1
            - ap-northeast-3
            - ap-northeast-2
            - ap-southeast-1
            - ap-southeast-2
            - ap-northeast-1
            - ca-central-1
            - eu-central-1
            - eu-west-1
            - eu-west-2
            - eu-south-1
            - eu-west-3
            - eu-north-1
            - me-south-1
            - sa-east-1
            - us-gov-east-1
            - us-gov-west-1
        Description: Name of the region (Eg - ap-southeast-2)
    DESTINATIONBUCKET:
        Type: String
        Description: Name of the new bucket where cloudwatch logs are to be exported
    GROUPNAME:
        Type: String
        Description: Name of the cloudWatch log group which has to be exported
    NUMBEROFDAYS:
        Type: String
        Description: If today is November 21st and NUMBEROFDAYS = 1, November 20th logs will be exported. (e.g. 2)
    SUBSCRIBEREMAIL:
        Type: String
        Description: Email address who will receive the failure email

Resources: 
  
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Description: Bucket where cloudwatch logs are to be exported
    Properties:
      BucketName: !Ref DESTINATIONBUCKET
          
  MyS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyS3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: !Sub logs.${REGION}.amazonaws.com
          Action: s3:GetBucketAcl
          Resource: !Sub arn:aws:s3:::${MyS3Bucket}
        - Effect: Allow
          Principal:
            Service: !Sub logs.${REGION}.amazonaws.com
          Action: s3:PutObject
          Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:  !Join ['-', ['export', 'cloudWatch', 'logs', 'to', 'S3', 'role']]
      Tags:
        - Key: Name
          Value: !Join ['-', ['export', 'cloudWatch', 'logs', 'to', 'S3']]
        - Key: cloudformation:stack
          Value: !Sub '${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchEventsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join ['-', ['export', 'cloudWatch', 'logs', 'to', 'S3', 'topic']]
      DisplayName: !Join [' ', [!Join ['-', ['export', 'cloudWatch', 'logs', 'to', 'S3', 'topic']], 'failure email with input event payload']]
      Subscription:
        - Endpoint: !Ref SUBSCRIBEREMAIL
          Protocol: email
      
  Function:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join ['-', ['export', 'cloudWatch', 'logs', 'to', 'S3', 'lambda']]
      Code:
        ZipFile: !Sub |
          import boto3
          import os
          import datetime
          
          GROUPNAME = os.environ['GROUPNAME']
          DESTINATIONBUCKET = os.environ['DESTINATIONBUCKET']
          NUMBEROFDAYS = os.environ['NUMBEROFDAYS']
          numberOfDays = int(NUMBEROFDAYS)
          
          today = datetime.datetime.now()
          start = today - datetime.timedelta(days=numberOfDays)
          end = today - datetime.timedelta(days=numberOfDays - 1)          
          fromTimestamp = int(start.timestamp() * 1000)
          toTimestamp = int(end.timestamp() * 1000)  
          BUCKET_PREFIX = start.strftime('%Y{0}%m{0}%d').format(os.path.sep)
          
          def lambda_handler(event, context):
              client = boto3.client('logs')
              client.create_export_task(
                   logGroupName=GROUPNAME,
                   fromTime=fromTimestamp,
                   to=toTimestamp,
                   destination=DESTINATIONBUCKET,
                   destinationPrefix=BUCKET_PREFIX
                  )          	

      Handler: index.lambda_handler
      DeadLetterConfig: 
        TargetArn: !Ref MySNSTopic
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.8
      Environment:
        Variables:
          DESTINATIONBUCKET: !Ref DESTINATIONBUCKET
          GROUPNAME: !Ref GROUPNAME
          NUMBEROFDAYS : !Ref NUMBEROFDAYS 
      Timeout: 900
      MemorySize: 10240
      Description: A lambda to export cloudWatch logs to S3
      Tags:
        - Key: Name
          Value: !Join ['-', ['export', 'cloudWatch', 'logs', 'to', 'S3']]
        - Key: cloudformation:stack
          Value: !Sub '${AWS::StackName}'
